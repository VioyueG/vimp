% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_vim.R
\name{merge_vim}
\alias{merge_vim}
\title{Merge multiple \code{vim} objects into one}
\usage{
merge_vim(...)
}
\arguments{
\item{...}{an arbitrary number of \code{vim} objects, separated by commas.}
}
\value{
an object of class \code{vim} containing all of the output
from the individual \code{vim} objects. This results in a list containing:
\itemize{
 \item{call}{ - the call to \code{merge_vim()}}
 \item{full.f}{ - a list of individual formulas or fitted values from the full regressions}
 \item{red.f}{ - a list of individual formulas or fitted values from the reduced regressions}
 \item{data}{ - the data used by the function}
 \item{j}{ - a list of the column(s) to calculate variable importance for}
 \item{SL.library}{ - a list of the libraries of learners passed to \code{SuperLearner}}
 \item{full.fit}{ - a list of the fitted values of the chosen method fit to the full data}
 \item{red.fit}{ - a list of the fitted values of the chosen method fit to the reduced data}
 \item{mat}{ - a matrix with the estimated variable importance, the standard errors, and the \eqn{(1-\alpha) x 100}\% confidence intervals}
 \item{full.mod}{ - a list of the objects returned by the estimation procedure for the full data regression (if applicable)}
 \item{red.mod}{ - a list of the objects returned by the estimation procedure for the reduced data regression (if applicable)}
 \item{alpha}{ - a list of the levels, for confidence interval calculation}
}
}
\description{
Take the output from multiple different calls to \code{vim} and
merge into a single \code{vim} object; mostly used for plotting results.
}
\examples{
\dontrun{
require(SuperLearner)
## generate the data
## generate X
p <- 2
n <- 100
x <- replicate(p, stats::runif(n, -5, 5))

## apply the function to the x's
smooth <- (x[,1]/5)^2*(x[,1]+7)/5 + (x[,2]/3)^2

## generate Y ~ Normal (smooth, 1)
y <- smooth + stats::rnorm(n, 0, 1)

testdat <- as.data.frame(cbind(y, x))

## set up a library for SuperLearner
learners <- "SL.gam"

## using class "formula"
est.2 <- vim(y ~ x, fit ~ x, data = testdat, y = testdat[, 1],
           n = length(y), indx = 2, standardized = TRUE, alpha = 0.05,
           SL.library = learners, cvControl = list(V = 10))

est.1 <- vim(est.2$full.fit, fit ~ x, data = testdat, y = testdat[, 1],
n = length(y), indx = 1, standardized = TRUE, alpha = 0.05, SL.library = learners,
cvControl = list(V = 10))

ests <- merge_vim(est.1, est.2)
}
}
